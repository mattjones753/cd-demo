#go get -u github.com/golang/dep/cmd/dep

jobs:
- name: build
  public: true
  plan:
  - get: git_repo
    version: latest
    trigger: true
  - get: golang_build_image
  - get: aws_cli_image
  - task: build
    image: golang_build_image
    config:
      platform: linux
      inputs:
      - name: git_repo
        path: ""
      run:
        path: sh
        args:
        - -ec
        - |
          ARTIFACT_DIR=$(pwd)/artifacts
          mkdir -p $GOPATH/src/github.com/mattjones753/
          cp -R git_repo $GOPATH/src/github.com/mattjones753/cd-demo
          cd $GOPATH/src/github.com/mattjones753/cd-demo
          apt-get update -y && apt-get install -y zip
          make all
          cp -R bin/*.zip $ARTIFACT_DIR
      outputs:
      - name: artifacts
  - task: publish_artifacts
    image: aws_cli_image
    config:
      platform: linux
      inputs:
      - name: artifacts
        path: ""
      params:
        S3_LAMBDA_BUCKET: ((artifact_s3_bucket))
        S3_LAMBDA_ARTIFACTS_KEY_PREFIX: ((artifact_s3_key_prefix))
      run:
        path: sh
        args:
        - -ec
        - |
          aws s3 cp artifacts s3://${S3_LAMBDA_BUCKET}/${S3_LAMBDA_ARTIFACTS_KEY_PREFIX}/ --recursive --exclude "*" --include "*.zip"

- name: deploy
  public: true
  plan:
  - get: git_repo
    version: latest
    passed:
    - build
    trigger: true
  - get: terraform_image
  - get: aws_cli_image
  - get: flyway_image
  - task: get_artifacts
    image: aws_cli_image
    config:
      platform: linux
      params:
        S3_LAMBDA_BUCKET: ((artifact_s3_bucket))
        S3_LAMBDA_ARTIFACTS_KEY_PREFIX: ((artifact_s3_key_prefix))
      run:
        path: sh
        args:
        - -ec
        - |
          aws s3 cp s3://${S3_LAMBDA_BUCKET}/${S3_LAMBDA_ARTIFACTS_KEY_PREFIX}/ ./artifacts/ --recursive --exclude "*" --include "*.zip"
      outputs:
      - name: artifacts
  - task: deploy
    image: terraform_image
    config:
      platform: linux
      inputs:
      - name: git_repo
        path: ""
      - name: artifacts
        path: ""
      params:
        TF_VAR_aws_deployment_role_arn: ((aws_deployment_role))
        TF_VAR_aws_region: ((aws_region))
        TF_VAR_aws_account_id: ((aws_account_id))
        TERRAFORM_BACKEND_BUCKET: ((terraform_backend_bucket))
        TERRAFORM_BACKEND_KEY: ((terraform_backend_key))
      run:
        path: sh
        args:
        - -ec
        - |
          export TF_VAR_artifact_directory=$(pwd)/artifacts
          export TERRAFORM_OUTPUT=$(pwd)/terraform_output
          cd git_repo/terraform/providers/aws/deployment_environment
          terraform init \
            -backend-config="role_arn=${TF_VAR_aws_deployment_role_arn}" \
            -backend-config="bucket=${TERRAFORM_BACKEND_BUCKET}" \
            -backend-config="key=${TERRAFORM_BACKEND_KEY}" \
            -backend-config="region=${TF_VAR_aws_region}"
          terraform apply

          terraform output db_url > ${TERRAFORM_OUTPUT}/db_url
      outputs:
      - name: terraform_output
  - task: db_migrate
    image: flyway_image
    config:
      platform: linux
      inputs:
      - name: terraform_output
        path: ""
      - name: git_repo
        path: ""
      run:
        path: sh
        args:
        - -ec
        - |
          export DATABASE_URL=`cat $(pwd)/terraform_output/db_url`
          flyway -configFile=git_repo/db/conf/flyway.conf -url ${DATABASE_URL} migrate

resources:
- name: git_repo
  type: git
  source:
    branch: master
    uri: https://github.com/mattjones753/cd-demo
- name: terraform_image
  type: docker-image
  source:
    repository: hashicorp/terraform
    tag: 0.11.10
- name: golang_build_image
  type: docker-image
  source:
    repository: golang
    tag: 1.11
- name: flyway_image
  type: docker-image
  source:
    repository: boxfuse/flyway
    tag: 5.2
- name: aws_cli_image
  type: docker-image
  source:
    repository: mesosphere/aws-cli
    tag: latest
